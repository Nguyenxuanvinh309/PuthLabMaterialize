// Transition Function
@mixin transition($transition) {
	-webkit-transition: $transition;
	-moz-transition: $transition;
	-ms-transition: $transition;
	-o-transition: $transition;
	transition: $transition;
}

// Border radius Function
@mixin border-radius($radius) {
	-webkit-border-radius: $radius;
	-moz-border-radius: $radius;
	-ms-border-radius: $radius;
	-o-border-radius: $radius;
	border-radius: $radius;
}

// Appearance Function
@mixin appearance($appearance) {
	-webkit-appearance: $appearance;
	-moz-appearance: $appearance;
	-ms-appearance: $appearance;
	-o-appearance: $appearance;
	appearance: $appearance;
}

// Transform Function
@mixin transform($appearance-x, $appearance-y) {
	-webkit-transform: translate($appearance-x, $appearance-y);
	-moz-transform: translate($appearance-x, $appearance-y);
	-ms-transform: translate($appearance-x, $appearance-y);
	-o-transform: translate($appearance-x, $appearance-y);
	transform: translate($appearance-x, $appearance-y);
}


// Mask Function
@mixin maskimage($mask-color, $mask-width, $mask-height, $mask-url){
	background-color: $mask-color;
    -webkit-mask: url($mask-url) no-repeat;
    -moz-mask: url($mask-url) no-repeat;
    -o-mask: url($mask-url) no-repeat;
    -ms-mask: url($mask-url) no-repeat;
    width: $mask-width;
    height: $mask-height;
}

//Pseudo after and before Function
@mixin pseudo($display: block, $pos: absolute, $content: ''){
    content: $content;
    display: $display;
    position: $pos;
}

//Responsive ratio Function
@mixin responsive-ratio($x,$y) {
    $padding: unquote( ( $y / $x ) * 100 + '%' );
    padding-top: $padding;
}

//Triangle shap Function
@mixin triangle-shape($color, $direction, $size: 6px, $position: absolute, $round: false){
    @include pseudo($pos: $position);
    width: 0;
    height: 0;

    @if $round {
        border-radius: 3px;
    }
    @if $direction == down {
        border-left: $size solid transparent;
        border-right: $size solid transparent;
        border-top: $size solid $color;
        margin-top: 0 - round( $size / 2.5 );
    } @else if $direction == up {
        border-left: $size solid transparent;
        border-right: $size solid transparent;
        border-bottom: $size solid $color;
        margin-bottom: 0 - round( $size / 2.5 );
    } @else if $direction == right {
        border-top: $size solid transparent;
        border-bottom: $size solid transparent;
        border-left: $size solid $color;
        margin-right: -$size;
    } @else if  $direction == left {
        border-top: $size solid transparent;
        border-bottom: $size solid transparent;
        border-right: $size solid $color;
        margin-left: -$size;
    }
}

//Font Style Function
@mixin font-style($size: false, $colour: false, $weight: false,  $lh: false) {
    @if $size { font-size: $size; }
    @if $colour { color: $colour; }
    @if $weight { font-weight: $weight; }
    @if $lh { line-height: $lh; }
}

//Placeholder content Funtion
@mixin input-placeholder {
    &{ @content; }
    &:-moz-placeholder { @content; }
    &::-moz-placeholder { @content; }
    &:-ms-input-placeholder { @content; }
    &::-webkit-input-placeholder { @content; }
}

//Media Screen Responsive Funtion
//Default media type: min
@mixin media-screen($width, $type: min) {
    @if map_has_key($breakpoints, $width) {
        $width: map_get($breakpoints, $width);

        @media (#{$type}-width: $width){
            @content;
        }
    }
}

// Break word function: Text have max-width and breakdown
@mixin break-word($truncation-boundary) {
    max-width: $truncation-boundary;
    word-wrap: break-word;
}


//Keyframes template function
@mixin keyframes($animation-name) {
    @-webkit-keyframes #{$animation-name} {
        @content;
    }
    @-moz-keyframes #{$animation-name} {
        @content;
    }  
    @-ms-keyframes #{$animation-name} {
        @content;
    }
    @-o-keyframes #{$animation-name} {
        @content;
    }  
    @keyframes #{$animation-name} {
        @content;
    }
}

//Use animation function
@mixin animation($str) {
  -webkit-animation: #{$str};
  -moz-animation: #{$str};
  -ms-animation: #{$str};
  -o-animation: #{$str};
  animation: #{$str};      
}

//Background gradient color basic: orientation vertical/horizontal
@mixin background-gradient($start-color, $end-color, $orientation) { 
    background: $start-color;

    @if $orientation == 'vertical' {
      background: -webkit-linear-gradient(top, $start-color, $end-color);
      background: linear-gradient(to bottom, $start-color, $end-color);
    } @else if $orientation == 'horizontal' {
      background: -webkit-linear-gradient(left, $start-color, $end-color);
      background: linear-gradient(to right, $start-color, $end-color);
    } @else {
      background: -webkit-radial-gradient(center, ellipse cover, $start-color, $end-color);
      background: radial-gradient(ellipse at center, $start-color, $end-color);
    }
}

//Box-model function
@mixin box-sizing($box-model) {
  -webkit-box-sizing: $box-model; // Safari <= 5
     -moz-box-sizing: $box-model; // Firefox <= 19
          box-sizing: $box-model;
} 

//Font-face function
@mixin font-face($font-name, $file-name, $weight: normal, $style: normal) { 
  @font-face {
    font-family: quote($font-name);
    src: url($file-name + '.eot');
    src: url($file-name + '.eot?#iefix')  format('embedded-opentype'),
         url($file-name + '.woff') format('woff'),
         url($file-name + '.ttf')  format('truetype'),
         url($file-name + '.svg##{$font-name}')  format('svg');
    font-weight: $weight;
    font-style: $style;
  }
 }
